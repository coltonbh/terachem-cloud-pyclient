{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"tccloud \ud83d\udd17 A Python Client for TeraChem Cloud. tccloud is a python client that makes performing quantum chemistry calculations easy, fast, and fun. All input and output data structures are based on the QCSchema specification designed by The Molecular Sciences Software Institute . The client provides a simple, yet powerful interface to perform quantum chemistry calculation using nothing but modern python and an internet connection. Compute is generously provided free of charge by the TeraChem Cloud project. Requirements \ud83d\udd17 Python 3.6+ tccloud stands on the shoulders of giants. It internally depends upon QCElemental , httpx , and toml . The AtomicInput , Molecule , Model , and AtomicResult models used throughout the package come directly from QCElemental . They are included in tccloud.models for your convenience. Installation \ud83d\udd17 pip install tccloud Example \ud83d\udd17 The Absolute Minimum \ud83d\udd17 Create a TeraChem Cloud account at https://tccloud.mtzlab.com/signup. Instantiate a client Configure client (only required the very first time you use TCClient ) >>> from tccloud import TCClient >>> client = TCClient () >>> client . configure () # only run the very first time you use TCClient # See supported compute engines >>> client . supported_engines [ 'psi4' , 'terachem_pbs' , ... ] # Test connection to TeraChem Cloud >>> client . hello_world ( \"Colton\" ) 'Welcome to TeraChem Cloud, Colton' Create a Molecule More details about the Molecule object can be found here and here . Molecules can be created from pubchem , local files, or using pure python. >>> from tccloud.models import Molecule >>> water = Molecule . from_data ( \"pubchem:water\" ) Specify your compute job using an AtomicInput object More details about the AtomicInput object can be found here . >>> from tccloud.models import AtomicInput >>> atomic_input = AtomicInput ( molecule = water , model = { \"method\" : \"B3LYP\" , \"basis\" : \"6-31g\" }, driver = \"energy\" ) Submit a computation, specify a target quantum chemistry engine, and get back an AtomicResult >>> future_result = client . compute ( atomic_input , engine = \"terachem_pbs\" ) >>> future_result . status 'STARTED' # Get result >>> result = future_result . get () # Successful computation >>> result . success True >>> result AtomicResult ( driver = 'energy' , model = { 'method' : 'B3LYP' , 'basis' : '6-31g' }, molecule_hash = 'b6ec4fa' ) >>> result . return_result - 76.38545794119997 # Failed computation >>> result . success False # View result >>> result FailedOperation ( error = ComputeError ( error_type = 'input_error' , error_message = 'QCEngine Input Error: Traceback (most recent call last):...' )) >>> from pprint import pprint >>> pprint ( result . error . error_message ) Putting it all together >>> from tccloud import TCClient >>> from tccloud.models import AtomicInput , Molecule >>> client = TCClient () >>> water = Molecule . from_data ( \"pubchem:water\" ) >>> atomic_input = AtomicInput ( molecule = water , model = { \"method\" : \"B3LYP\" , \"basis\" : \"6-31g\" }, driver = \"energy\" ) >>> future_result = client . compute ( atomic_input , engine = \"terachem_pbs\" ) >>> result = future_result . get () >>> result AtomicResult ( driver = 'energy' , model = { 'method' : 'B3LYP' , 'basis' : '6-31g' }, molecule_hash = 'b6ec4fa' ) >>> result . return_result - 76.38545794119997 Licence \ud83d\udd17 This project is licensed under the terms of the MIT license.","title":"tccloud"},{"location":"#tccloud","text":"A Python Client for TeraChem Cloud. tccloud is a python client that makes performing quantum chemistry calculations easy, fast, and fun. All input and output data structures are based on the QCSchema specification designed by The Molecular Sciences Software Institute . The client provides a simple, yet powerful interface to perform quantum chemistry calculation using nothing but modern python and an internet connection. Compute is generously provided free of charge by the TeraChem Cloud project.","title":"tccloud"},{"location":"#requirements","text":"Python 3.6+ tccloud stands on the shoulders of giants. It internally depends upon QCElemental , httpx , and toml . The AtomicInput , Molecule , Model , and AtomicResult models used throughout the package come directly from QCElemental . They are included in tccloud.models for your convenience.","title":"Requirements"},{"location":"#installation","text":"pip install tccloud","title":"Installation"},{"location":"#example","text":"","title":"Example"},{"location":"#the-absolute-minimum","text":"Create a TeraChem Cloud account at https://tccloud.mtzlab.com/signup. Instantiate a client Configure client (only required the very first time you use TCClient ) >>> from tccloud import TCClient >>> client = TCClient () >>> client . configure () # only run the very first time you use TCClient # See supported compute engines >>> client . supported_engines [ 'psi4' , 'terachem_pbs' , ... ] # Test connection to TeraChem Cloud >>> client . hello_world ( \"Colton\" ) 'Welcome to TeraChem Cloud, Colton' Create a Molecule More details about the Molecule object can be found here and here . Molecules can be created from pubchem , local files, or using pure python. >>> from tccloud.models import Molecule >>> water = Molecule . from_data ( \"pubchem:water\" ) Specify your compute job using an AtomicInput object More details about the AtomicInput object can be found here . >>> from tccloud.models import AtomicInput >>> atomic_input = AtomicInput ( molecule = water , model = { \"method\" : \"B3LYP\" , \"basis\" : \"6-31g\" }, driver = \"energy\" ) Submit a computation, specify a target quantum chemistry engine, and get back an AtomicResult >>> future_result = client . compute ( atomic_input , engine = \"terachem_pbs\" ) >>> future_result . status 'STARTED' # Get result >>> result = future_result . get () # Successful computation >>> result . success True >>> result AtomicResult ( driver = 'energy' , model = { 'method' : 'B3LYP' , 'basis' : '6-31g' }, molecule_hash = 'b6ec4fa' ) >>> result . return_result - 76.38545794119997 # Failed computation >>> result . success False # View result >>> result FailedOperation ( error = ComputeError ( error_type = 'input_error' , error_message = 'QCEngine Input Error: Traceback (most recent call last):...' )) >>> from pprint import pprint >>> pprint ( result . error . error_message ) Putting it all together >>> from tccloud import TCClient >>> from tccloud.models import AtomicInput , Molecule >>> client = TCClient () >>> water = Molecule . from_data ( \"pubchem:water\" ) >>> atomic_input = AtomicInput ( molecule = water , model = { \"method\" : \"B3LYP\" , \"basis\" : \"6-31g\" }, driver = \"energy\" ) >>> future_result = client . compute ( atomic_input , engine = \"terachem_pbs\" ) >>> result = future_result . get () >>> result AtomicResult ( driver = 'energy' , model = { 'method' : 'B3LYP' , 'basis' : '6-31g' }, molecule_hash = 'b6ec4fa' ) >>> result . return_result - 76.38545794119997","title":"The Absolute Minimum"},{"location":"#licence","text":"This project is licensed under the terms of the MIT license.","title":"Licence"},{"location":"development/core_decisions/","text":"Core Development Decisions \ud83d\udd17 _RequestsClient Class \ud83d\udd17 _RequestsClient public http methods (like compute() and result() should always return Python objects. This gives a layer of abstraction between callers who want to think in terms of Python data objects and the _RequestsClient which thinks in terms of http requests and json data structures. FutureResult Class \ud83d\udd17 .get() will return either an AtomicResult or a FailedOperation object. From the users perspective they essentially get back a generic \"Result\" object (which will be either an AtomicResult or FailedOperation ) and can check for its status (once complete) by checking result.status . While this separates the user a bit from the \"status\" field returned by the API, I think this is the easiest user interface, i.e., they get back a result from a future_result and can check its status very simply without having to think separately about status fields and results fields They can still access the API returned status field at future_result.status if needed. E.g.,: result = future_result . get () result . success False # If FailedOperation returned result . success True # If AtomicResult returned","title":"Core Development Decisions"},{"location":"development/core_decisions/#core-development-decisions","text":"","title":"Core Development Decisions"},{"location":"development/core_decisions/#_requestsclient-class","text":"_RequestsClient public http methods (like compute() and result() should always return Python objects. This gives a layer of abstraction between callers who want to think in terms of Python data objects and the _RequestsClient which thinks in terms of http requests and json data structures.","title":"_RequestsClient Class"},{"location":"development/core_decisions/#futureresult-class","text":".get() will return either an AtomicResult or a FailedOperation object. From the users perspective they essentially get back a generic \"Result\" object (which will be either an AtomicResult or FailedOperation ) and can check for its status (once complete) by checking result.status . While this separates the user a bit from the \"status\" field returned by the API, I think this is the easiest user interface, i.e., they get back a result from a future_result and can check its status very simply without having to think separately about status fields and results fields They can still access the API returned status field at future_result.status if needed. E.g.,: result = future_result . get () result . success False # If FailedOperation returned result . success True # If AtomicResult returned","title":"FutureResult Class"},{"location":"usage/Atomic%20Input/","text":"","title":"Atomic Input"},{"location":"usage/TCClient/","text":"TCClient \ud83d\udd17 The TCClient is the main way you will interact with TeraChem Cloud to make compute requests.","title":"TCClient"},{"location":"usage/TCClient/#tcclient","text":"The TCClient is the main way you will interact with TeraChem Cloud to make compute requests.","title":"TCClient"},{"location":"usage/authentication/","text":"Authentication \ud83d\udd17 Authentication is the process of supplying your credentials (usually a username and password) to tccloud so that you can perform computation. tccloud provides a few easy ways for you to authenticate. If you do not have a TeraChem Cloud account you can get one for free here: https://tccloud.mtzlab.com/signup Username and Password \ud83d\udd17 client.configure() (recommended for most cases) \ud83d\udd17 >>> from tccloud import TCClient >>> client = TCClient () >>> client . configure () \u2705 If you dont get have an account please signup at : https : // tccloud . mtzlab . com / signup Please enter your TeraChem Cloud username : your_username @email . com Please enter your TeraChem Cloud password : Authenticating ... 'default' profile configured ! Username / password not required for future use of TCClient Performing this action will configure your local client by writing authentication tokens to ~/.tccloud/credentials . You will not need to execute configure() ever again. Under the hood TCClient will access your tokens, refresh them when necessary, and keep you logged in to TeraChem Cloud. Note that this will write a file to your home directory with sensitive access tokens, so if you are on a shared computer or using a device where you would not want to write this information to disk do not use this option. If you would like to write the credentials file to a different directory than ~/.tccloud , set the TCCLOUD_BASE_DIRECTORY environment variable to the path of interest. You can configure multiple profiles in case you have multiple logins to TeraChem cloud by passing a profile name to configure() : >>> client . configure ( 'mtz_lab' ) \u2705 If you dont get have an account please signup at : https : // tccloud . mtzlab . com / signup Please enter your TeraChem Cloud username : your_username @email . om Please enter your TeraChem Cloud password : Authenticating ... 'mtz_lab' profile configured ! Username / password not required for future use of TCClient To use one of these profiles pass the profile option to your client instance. The \"default\" profile is used when no profile name is passed: >>> from tccloud import TCClient # Use default profile >>> client = TCClient () # Use named profile >>> client = TCClient ( profile = \"mtz_lab\" ) Environment Variables \ud83d\udd17 You can set your TeraChem username and password in your environment and the client will find them automatically. Set TCCLOUD_USERNAME and TCCLOUD_PASSWORD . When you create a client it will find these values and maintain all access tokens in memory only. Pass Username/Password when prompted after requesting a compute job \ud83d\udd17 If you have not run client.configure() or set environment variables you will be requested for your username and password when you submit a computation to TeraChem Cloud using client.compute(...) . The client will use your username and password to get access tokens and will maintain access tokens for you in memory only. Your login session will be valid for the duration of your python session. Pass Username/Password to Client (not recommended) \ud83d\udd17 You can directly pass a username and password to the client object. This is not recommended as it opens up the possibility of your credentials accidentally being committed to your code repo. However, it can be used in rare circumstances when necessary. >>> from tccloud import TCClient >>> client = TCClient ( tccloud_username = \"your_username@email.com\" , tccloud_password = \"super_secret_password\" )","title":"Authentication"},{"location":"usage/authentication/#authentication","text":"Authentication is the process of supplying your credentials (usually a username and password) to tccloud so that you can perform computation. tccloud provides a few easy ways for you to authenticate. If you do not have a TeraChem Cloud account you can get one for free here: https://tccloud.mtzlab.com/signup","title":"Authentication"},{"location":"usage/authentication/#username-and-password","text":"","title":"Username and Password"},{"location":"usage/authentication/#clientconfigure-recommended-for-most-cases","text":">>> from tccloud import TCClient >>> client = TCClient () >>> client . configure () \u2705 If you dont get have an account please signup at : https : // tccloud . mtzlab . com / signup Please enter your TeraChem Cloud username : your_username @email . com Please enter your TeraChem Cloud password : Authenticating ... 'default' profile configured ! Username / password not required for future use of TCClient Performing this action will configure your local client by writing authentication tokens to ~/.tccloud/credentials . You will not need to execute configure() ever again. Under the hood TCClient will access your tokens, refresh them when necessary, and keep you logged in to TeraChem Cloud. Note that this will write a file to your home directory with sensitive access tokens, so if you are on a shared computer or using a device where you would not want to write this information to disk do not use this option. If you would like to write the credentials file to a different directory than ~/.tccloud , set the TCCLOUD_BASE_DIRECTORY environment variable to the path of interest. You can configure multiple profiles in case you have multiple logins to TeraChem cloud by passing a profile name to configure() : >>> client . configure ( 'mtz_lab' ) \u2705 If you dont get have an account please signup at : https : // tccloud . mtzlab . com / signup Please enter your TeraChem Cloud username : your_username @email . om Please enter your TeraChem Cloud password : Authenticating ... 'mtz_lab' profile configured ! Username / password not required for future use of TCClient To use one of these profiles pass the profile option to your client instance. The \"default\" profile is used when no profile name is passed: >>> from tccloud import TCClient # Use default profile >>> client = TCClient () # Use named profile >>> client = TCClient ( profile = \"mtz_lab\" )","title":"client.configure() (recommended for most cases)"},{"location":"usage/authentication/#environment-variables","text":"You can set your TeraChem username and password in your environment and the client will find them automatically. Set TCCLOUD_USERNAME and TCCLOUD_PASSWORD . When you create a client it will find these values and maintain all access tokens in memory only.","title":"Environment Variables"},{"location":"usage/authentication/#pass-usernamepassword-when-prompted-after-requesting-a-compute-job","text":"If you have not run client.configure() or set environment variables you will be requested for your username and password when you submit a computation to TeraChem Cloud using client.compute(...) . The client will use your username and password to get access tokens and will maintain access tokens for you in memory only. Your login session will be valid for the duration of your python session.","title":"Pass Username/Password when prompted after requesting a compute job"},{"location":"usage/authentication/#pass-usernamepassword-to-client-not-recommended","text":"You can directly pass a username and password to the client object. This is not recommended as it opens up the possibility of your credentials accidentally being committed to your code repo. However, it can be used in rare circumstances when necessary. >>> from tccloud import TCClient >>> client = TCClient ( tccloud_username = \"your_username@email.com\" , tccloud_password = \"super_secret_password\" )","title":"Pass Username/Password to Client (not recommended)"},{"location":"usage/compute/","text":"Compute \ud83d\udd17 Overview \ud83d\udd17 Computations are performed on TeraChem Cloud . The tccloud python client submits jobs to and retrieves from TeraChem Cloud. Computations require an AtomicInput object and the specification of a compute engine. >>> from tccloud import TCClient >>> from tccloud.models import AtomicInput , Molecule >>> client = TCClient () >>> water = Molecule . from_data ( \"pubchem:water\" ) >>> atomic_input = AtomicInput ( molecule = water , model = { \"method\" : \"B3LYP\" , \"basis\" : \"6-31g\" }, driver = \"energy\" ) >>> future_result = client . compute ( atomic_input , engine = \"terachem_pbs\" ) >>> result = future_result . get () >>> result AtomicResult ( driver = 'energy' , model = { 'method' : 'B3LYP' , 'basis' : '6-31g' }, molecule_hash = 'b6ec4fa' ) >>> result . return_result - 76.38545794119997 Supported compute engines can be checked on the client. If you would like to request additional engines please open an issue . >>> client . supported_engines [ 'psi4' , 'terachem_pbs' , ... ] Keywords \ud83d\udd17 Keywords specific to a quantum chemistry engine can be added to an AtomicInput as follows: ai = AtomicInput ( ... , keywords = { \"molden\" : True , \"imd_orbital_type\" : \"whole_c\" , ... } )","title":"Compute"},{"location":"usage/compute/#compute","text":"","title":"Compute"},{"location":"usage/compute/#overview","text":"Computations are performed on TeraChem Cloud . The tccloud python client submits jobs to and retrieves from TeraChem Cloud. Computations require an AtomicInput object and the specification of a compute engine. >>> from tccloud import TCClient >>> from tccloud.models import AtomicInput , Molecule >>> client = TCClient () >>> water = Molecule . from_data ( \"pubchem:water\" ) >>> atomic_input = AtomicInput ( molecule = water , model = { \"method\" : \"B3LYP\" , \"basis\" : \"6-31g\" }, driver = \"energy\" ) >>> future_result = client . compute ( atomic_input , engine = \"terachem_pbs\" ) >>> result = future_result . get () >>> result AtomicResult ( driver = 'energy' , model = { 'method' : 'B3LYP' , 'basis' : '6-31g' }, molecule_hash = 'b6ec4fa' ) >>> result . return_result - 76.38545794119997 Supported compute engines can be checked on the client. If you would like to request additional engines please open an issue . >>> client . supported_engines [ 'psi4' , 'terachem_pbs' , ... ]","title":"Overview"},{"location":"usage/compute/#keywords","text":"Keywords specific to a quantum chemistry engine can be added to an AtomicInput as follows: ai = AtomicInput ( ... , keywords = { \"molden\" : True , \"imd_orbital_type\" : \"whole_c\" , ... } )","title":"Keywords"},{"location":"usage/keywords/","text":"Keywords \ud83d\udd17 terachem_pbs \ud83d\udd17 molden : Optional, True/False If set to True and imd_orbital_type set to whole_c the AtomicResult.extras['molden'] field will contain a string of the molden file. imd_orbital_type : Optional, One of: [\"no_orbital\", \"alpha_orbital\", \"beta_orbital\", \"alpha_density\", \"beta_density\", \"whole_c\"], Default: \"no_orbital\".","title":"Keywords"},{"location":"usage/keywords/#keywords","text":"","title":"Keywords"},{"location":"usage/keywords/#terachem_pbs","text":"molden : Optional, True/False If set to True and imd_orbital_type set to whole_c the AtomicResult.extras['molden'] field will contain a string of the molden file. imd_orbital_type : Optional, One of: [\"no_orbital\", \"alpha_orbital\", \"beta_orbital\", \"alpha_density\", \"beta_density\", \"whole_c\"], Default: \"no_orbital\".","title":"terachem_pbs"},{"location":"usage/molecule/","text":"Molecule \ud83d\udd17 The Molecule object is the core representation of a molecule used throughout tccloud . The molecule object is from the qcelemental.models module, but it is available in the tccloud.models module for your convenience. You can access the QCElemental documentation on the Molecule here . It is assumed that all geometries are in bohr . Import the Model object \ud83d\udd17 from tccloud.models import Molecule Create a Molecule \ud83d\udd17 Molecules can be created directly from data on pubchem , a python string, a psi4 file, an xyz file, an xyz+ file, or a json file. Pubchem: water = Molecule . from_data ( \"pubchem:water\" ) From Files: water = Molecule . from_file ( \"water.xyz\" ) water = Molecule . from_file ( \"water.psi4\" ) Save a Molecule to a file \ud83d\udd17 water = Molecule . from_data ( \"pubchem:water\" ) # JSON is the prefered format since it preserves the most information water . to_file ( \"water.json\" ) water . to_file ( \"water.xyz\" ) water . to_file ( \"water.psi4\" ) Basic Attributes \ud83d\udd17 water = Molecule . from_data ( \"pubchem:water\" ) water . symbols array ([ 'O' , 'H' , 'H' ], dtype = '<U1' ) water . symbols water . geometry array ([[ 0. , 0. , 0. ], [ 0.52421003 , 1.68733646 , 0.48074633 ], [ 1.14668581 , - 0.45032174 , - 1.35474466 ]]) # All Attributes attrs = [ attr for attr in dir ( water ) if not attr . startswith ( \"_\" )] print ( attrs )","title":"Molecule"},{"location":"usage/molecule/#molecule","text":"The Molecule object is the core representation of a molecule used throughout tccloud . The molecule object is from the qcelemental.models module, but it is available in the tccloud.models module for your convenience. You can access the QCElemental documentation on the Molecule here . It is assumed that all geometries are in bohr .","title":"Molecule"},{"location":"usage/molecule/#import-the-model-object","text":"from tccloud.models import Molecule","title":"Import the Model object"},{"location":"usage/molecule/#create-a-molecule","text":"Molecules can be created directly from data on pubchem , a python string, a psi4 file, an xyz file, an xyz+ file, or a json file. Pubchem: water = Molecule . from_data ( \"pubchem:water\" ) From Files: water = Molecule . from_file ( \"water.xyz\" ) water = Molecule . from_file ( \"water.psi4\" )","title":"Create a Molecule"},{"location":"usage/molecule/#save-a-molecule-to-a-file","text":"water = Molecule . from_data ( \"pubchem:water\" ) # JSON is the prefered format since it preserves the most information water . to_file ( \"water.json\" ) water . to_file ( \"water.xyz\" ) water . to_file ( \"water.psi4\" )","title":"Save a Molecule to a file"},{"location":"usage/molecule/#basic-attributes","text":"water = Molecule . from_data ( \"pubchem:water\" ) water . symbols array ([ 'O' , 'H' , 'H' ], dtype = '<U1' ) water . symbols water . geometry array ([[ 0. , 0. , 0. ], [ 0.52421003 , 1.68733646 , 0.48074633 ], [ 1.14668581 , - 0.45032174 , - 1.35474466 ]]) # All Attributes attrs = [ attr for attr in dir ( water ) if not attr . startswith ( \"_\" )] print ( attrs )","title":"Basic Attributes"}]}